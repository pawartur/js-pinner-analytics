type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer: CeramicAccount
  taskIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): TaskConnection
  integrationMessageIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): IntegrationMessageConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  id: ID!
  isViewer: Boolean!
  taskList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): TaskConnection
  integrationMessageList(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): IntegrationMessageConnection
}

"""A connection to a list of items."""
type TaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge"""
  node: Task

  """A cursor for use in pagination"""
  cursor: String!
}

type Task implements Node {
  id: ID!
  content: String!
  assignee: String!
  completed: Boolean
}

"""A connection to a list of items."""
type IntegrationMessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IntegrationMessageEdge]
}

"""An edge in a connection."""
type IntegrationMessageEdge {
  """The item at the end of the edge"""
  node: IntegrationMessage

  """A cursor for use in pagination"""
  cursor: String!
}

type IntegrationMessage implements Node {
  id: ID!
  date: String
  from: String!
  type: String!
  message: String!
}

type Mutation {
  createTask(input: CreateTaskInput!): CreateTaskPayload
  updateTask(input: UpdateTaskInput!): UpdateTaskPayload
  createIntegrationMessage(input: CreateIntegrationMessageInput!): CreateIntegrationMessagePayload
  updateIntegrationMessage(input: UpdateIntegrationMessageInput!): UpdateIntegrationMessagePayload
}

type CreateTaskPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer: CeramicAccount
  document: Task!
  clientMutationId: String
}

input CreateTaskInput {
  content: RequiredTaskInput!
  clientMutationId: String
}

input RequiredTaskInput {
  content: String!
  assignee: String!
  completed: Boolean
}

type UpdateTaskPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer: CeramicAccount
  document: Task!
  clientMutationId: String
}

input UpdateTaskInput {
  id: ID!
  content: TaskInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input TaskInput {
  content: String
  assignee: String
  completed: Boolean
}

input UpdateOptionsInput {
  replace: Boolean
  version: CeramicCommitID
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID

type CreateIntegrationMessagePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer: CeramicAccount
  document: IntegrationMessage!
  clientMutationId: String
}

input CreateIntegrationMessageInput {
  content: RequiredIntegrationMessageInput!
  clientMutationId: String
}

input RequiredIntegrationMessageInput {
  date: String
  from: String!
  type: String!
  message: String!
}

type UpdateIntegrationMessagePayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  viewer: CeramicAccount
  document: IntegrationMessage!
  clientMutationId: String
}

input UpdateIntegrationMessageInput {
  id: ID!
  content: IntegrationMessageInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input IntegrationMessageInput {
  date: String
  from: String
  type: String
  message: String
}
